Coded by Guorui Shen, May 5, 2020.

The code here is for implementation of the example:
https://www.zhihu.com/search?type=content&q=adaboost

import numpy as np
X = [i for i in range(10)]
Y = [1]*3 + [-1]*3 + [1]*3 + [-1]
print(X, Y)

def week_classifier(X, threshold, greater_or_less):
  # input: X is a 1D vector
  # input: greater_or_less is 0(x<threshold) or 1(x>threshold)
  # return: a vector of the same length as X with the ith element corresponds to the class of X_i
  ans = []
  if greater_or_less==0:
    for x in X:
      if x<threshold: ans.append(1)
      else: ans.append(-1)
  else:
     for x in X:
      if x>threshold: ans.append(1)
      else: ans.append(-1)   
  return ans

def adaboost_classifier(X, alpha, new_thresholds, greater_or_less_vector):
  ans = [.0]*len(X)
  dic = dict()
  for i in range(len(alpha)):
    dic[i] = week_classifier(X, new_thresholds[i], greater_or_less_vector[i])
  for j in range(len(X)):
    for i in range(len(alpha)):
      ans[j] += alpha[i]*dic[i][j]
    if ans[j]<0: ans[j] = -1
    else: ans[j] = 1
  return ans

def error(Y, Y_hat, W):
  # input: Y, Y_hat represent true label, predicted vectors, respectively.
  # input: W is a vector composed of weights
  # return: the error between Y and Y_hat
  ans = .0
  for i in range(len(Y)):
    if Y[i]!=Y_hat[i]: ans += W[i]*1
    # else: ans += W[i]*0
  return ans

W = [[.1]*len(X)]
alpha = []
new_thresholds = []
greater_or_less_vector = []
thresholds = [2.5, 5.5, 8.5]
for t in range(5):
  errors = []
  for threshold in thresholds:
    Y_hat = week_classifier(X, threshold, 0)
    errors.append(error(Y, Y_hat, W[-1]))
    Y_hat = week_classifier(X, threshold, 1)
    errors.append(error(Y, Y_hat, W[-1]))
  err = min(errors)
  index = errors.index(err)
  new_thresholds.append(thresholds[int(index/2)])
  print("thresholds:", new_thresholds)
  alpha.append(.5*np.log((1-err)/err))
  print("alpha=", alpha)
  greater_or_less = index%2
  greater_or_less_vector.append(greater_or_less)
  print("greater_or_less_vector=", greater_or_less_vector)
  prediction = adaboost_classifier(X, alpha, new_thresholds, greater_or_less_vector)
  
  temp = 0
  for i in range(len(X)):
    if prediction[i]==Y[i]: temp += 1
  print("Correctly classified points/total points = ", temp, len(Y))
  print(prediction)
  
  # update weights for loss function
  W_temp = []
  Y_hat = week_classifier(X, new_thresholds[-1], greater_or_less)
  zm = sum([W[-1][i]*np.exp(-alpha[-1]*Y[i]*Y_hat[i]) for i in range(len(X))])
  # zm = 2*np.sqrt(err*(1-err))
  for i in range(len(X)):
    W_temp.append(W[-1][i]*np.exp(-alpha[-1]*Y[i]*Y_hat[i])/zm)
  W.append(W_temp)